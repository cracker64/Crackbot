import os

AddOption('--32bit',dest="32bit",action='store_true',default=True,help="32-bit platform target")
AddOption('--64bit',dest="64bit",action='store_true',default=True,help="64-bit platform target")
AddOption('--sse',dest="sse",action='store_true',default=False,help="Enable SSE optimisations")
AddOption('--sse2',dest="sse2",action='store_true',default=False,help="Enable SSE2 optimisations")
AddOption('--sse3',dest="sse3",action='store_true',default=False,help="Enable SSE3 optimisations")
AddOption('--sse4',dest="sse4",action='store_true',default=False,help="Enable SSE4 optimisations")
AddOption('--avx',dest="avx",action='store_true',default=False,help="Enable AVX optimisations")
AddOption('--avx2',dest="avx2",action='store_true',default=False,help="Enable AVX2 optimisations")
AddOption('--win',dest="win",action='store_true',default=False,help="Windows platform target.")
AddOption('--lin',dest="lin",action='store_true',default=False,help="Linux platform target")

if not GetOption('lin') and not GetOption('win'):
	print "You must specify a platform to target"
	raise SystemExit(1)

if GetOption('win'):
	env = Environment(tools = ['mingw'], ENV = os.environ)
else:
	env = Environment(tools = ['default'], ENV = os.environ)

env.Append(LIBS=['pthread', 'lua5.1'])

if GetOption('32bit'):
	env.Append(CFlAGS=['-m32'])
if GetOption('64bit'):
	env.Append(CFlAGS=['-m64'])

if GetOption('sse'):
	env.Append(CFLAGS='-msse')
if GetOption('sse2'):
	env.Append(CFLAGS='-msse2')
if GetOption('sse3'):
	env.Append(CFLAGS='-msse3')
if GetOption('sse4'):
	env.Append(CFLAGS='-msse4')
if GetOption('avx'):
	env.Append(CFLAGS='-mavx')
if GetOption('avx2'):
	env.Append(CFLAGS='-maxv2')

Name = "luasandbox"

if GetOption('win'):
	Name += ".exe"

t=env.Program(target=Name, source=['code.c'])
Default(t)
