AddOption('--64bit',dest="_64bit",action='store_true',default=False,help="64-bit platform target")
AddOption('--32bit',dest="_32bit",action='store_true',default=False,help="32-bit platform target")

AddOption('--sse',dest="sse",action='store_true',default=False,help="Enable SSE optimisations")
AddOption('--sse2',dest="sse2",action='store_true',default=False,help="Enable SSE2 optimisations")
AddOption('--sse3',dest="sse3",action='store_true',default=False,help="Enable SSE3 optimisations")
AddOption('--sse4',dest="sse4",action='store_true',default=False,help="Enable SSE4 optimisations")
AddOption('--sse5',dest="sse5",action='store_true',default=False,help="Enable SSE4 optimisations")
AddOption('--win',dest="win",action='store_true',default=False,help="Windows platform target.")
AddOption('--lin',dest="lin",action='store_true',default=False,help="Linux platform target")


if((not GetOption('lin')) and (not GetOption('win'))):
	print "You must specify a platform to target"
	raise SystemExit(1)

if not (GetOption('_64bit') or GetOption('_32bit')):
	print "You must select an architecture"
	raise SystemExit(1)

# if the platform is windows switch to a mingw toolset, use the default otherwise

if(GetOption('win')):
	env = Environment(tools = ['mingw'], ENV = os.environ)
else:
	env = Environment(tools = ['default'], ENV = os.environ)

env.Append(CFLAGS=['-pthread -llua5.1'])
env.Append(LIBS=['pthread', 'lua'])


# windows specific enviroment settings
# ++++++++++++++++++++++++++++++++++++

# check if we're compiling for windows, if we are include windows specific libraries and defines.

if GetOption('win'):
	env.Prepend(LIBS=['mingw32', 'ws2_32'])
	env.Append(LIBS=['winmm', 'gdi32'])
	env.Append(LINKFLAGS=['-mwindows'])


if GetOption('_64bit'):
	env.Append(LINKFLAGS=['-m64'])
	env.Append(CFLAGS=['-m64'])
if GetOption('_32bit'):
	env.Append(CFlAGS=['-m32'])
	env.Append(LINKFLAGS=['-m32'])

if GetOption('sse'):
	env.Append(CCFLAGS='-msse')
if GetOption('sse2'):
	env.Append(CFLAGS='-msse2')
if GetOption('sse3'):
	env.Append(CFLAGS='-msse3')
if GetOption('sse4'):
	env.Append(CFLAGS='-msse4')
if GetOption('sse5'):
	env.Append(CFLAGS='-msse5'

sources=Glob("code.c")


# use some settings to detect what name to use for the executable

programName = "luasandbox"


if GetOption('win'):
	programName += ".exe"

# set a default target

t=env.Program(target=programName, source=sources)
Default(t)
